{"version":3,"sources":["components/common/Preloader/Preloader.module.scss","api/api.ts","components/Dialogs/Dialogs.module.scss","components/Navbar/Navbar.module.scss","components/Navbar/Navbar.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Messages/MessageItem/MessageItemMy.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","redux/actionsCreator/dialogsAC.ts","assets/Spinner-1s-200px.gif","components/common/Preloader/Preloader.tsx","components/Profile/ProfileContainer.tsx","components/Users/Users.tsx","redux/actionsCreator/usersAC.ts","redux/reducers/users-selector.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/actionsCreator/authAC.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","redux/actionsCreator/appAC.ts","reportWebVitals.ts","redux/reducers/profileReducer.ts","redux/reducers/dialogsReducer.ts","redux/reducers/usersReducer.ts","redux/reducers/authReducer.ts","redux/reducers/appReducer.ts","redux/store.ts","index.tsx","components/Dialogs/Dialog/Dialog.module.scss","components/common/FormsControls/FormsControls.module.scss","components/common/FormsControls/FormsControls.tsx","utils/validators.ts","redux/actionsCreator/profileAC.ts","components/Dialogs/Messages/Messages.module.scss","redux/actions/actions.js","components/Header/Header.module.scss","components/Users/Users.module.scss"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","userFollow","userId","post","userUnfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authMe","auth","login","formData","logout","Navbar","className","style","nav","nav__list","nav__item","to","Dialog","id","path","dialog","avatar__wrapper","src","avatar","alt","isOnline","online","offline","status__block","name","title","MessageItemMy","message","messagesMy","MessageItem","messagesSubscriber","Messages","AddMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","input_btn__block","Field","component","Input","validate","required","type","icon","Dialogs","dialogs","messages","addMessage","dialogsItem","dialog__wrapper","map","d","i","shadow__bottom","shadow__top","message__wrapper","m","newMessage","dialogsMessage","mapStateToProps","state","isAuth","DialogsContainer","compose","connect","dialogsPage","dispatch","value","ADD_MESSAGE","Component","restProps","Preloader","s","loading","preloader","Profile","React","lazy","ProfileContainer","this","match","params","history","push","getUserProfile","getUserStatus","prevProps","prevState","snapshot","fallback","profile","updateStatusProfile","withRouterHOC","withRouter","posts","profilePage","addPost","defaultAvatar","Users","timeoutId","useState","setValue","pagesCount","Math","ceil","totalUsersCount","pages","pagination","onChange","e","currentValue","currentTarget","clearTimeout","setTimeout","setFilter","users","length","p","onClick","onPageChanged","selected","u","photos","small","followed","disabled","followingInProgress","some","unfollow","follow","setCurrentPage","SET_CURRENT_PAGE","setTotalUsersCount","totalCount","SET_TOTAL_USERS","toggleIsFetching","isFetching","TOGGLE_IS_FETCHING","toggleFollowingInProgress","TOGGLE_IS_FOLLOWING_PROGRESS","getFilteredUsers","usersPage","filter","toLowerCase","indexOf","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","usersRequest","console","log","page","items","SET_USERS","uId","resultCode","FOLLOW","UNFOLLOW","Header","header","setAuthUserDataAC","email","SET_USER_DATA","payload","HeaderContainer","LoginReduxForm","error","placeholder","action","stopSubmit","_error","App","initializeApp","initialized","render","exact","app","res","Promise","all","INITIALIZED","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","likesCount","profileReducer","ADD_POST","messageBody","SET_USER_PROFILE","SET_STATUS","dialogsReducer","messageText","usersReducer","authReducer","fake","appReducer","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","StrictMode","document","getElementById","input","meta","hasError","touched","formControl","errorMessage","TextArea","setUserProfile","setStatus"],"mappings":"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","file":"static/js/main.f8efb1e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Preloader_loading__2PkkU\"};","import axios from \"axios\";\r\n\r\n\r\n// создаем instance axios и настраиваем один раз, чтобы не дублировать код при каждом запросе.\r\nconst instance = axios.create({\r\n    // withCredentials - Свойство withCredentials это Boolean который определяет, должны ли\r\n    // создаваться кросс-доменные Access-Control запросы с использованием таких идентификационных данных как cookie\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods' : 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number){\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data) },\r\n    userFollow(userId: number) {\r\n        return instance.post<CommonResponseType<boolean>>(`follow/${userId}`)\r\n            .then(response => response.data) },\r\n    userUnfollow(userId: number) {\r\n        return instance.delete<CommonResponseType<boolean>>(`follow/${userId}`)\r\n            .then(response => response.data) }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<profileUserType>(`profile/${userId}`)\r\n            .then(response => response.data) },\r\n    getStatus(userId: number) {\r\n        return instance.get<any>(`profile/status/${userId}`)\r\n        .then(response => response.data) },\r\n    updateStatus(status: string) {\r\n        return instance.put<any>(`profile/status`, { status: status })\r\n        .then(response => response.data) },\r\n}\r\n\r\nexport const authMe = {\r\n    auth() { return instance.get<CommonResponseType<AuthMeType>>('auth/me')\r\n        .then(response => response.data) },\r\n    login(formData: FormDataType) { return instance.post<CommonResponseType<AuthMeType>>('auth/login', {...formData})\r\n        .then(response => response.data) },\r\n    logout() { return instance.delete<CommonResponseType<{}>>('auth/login')\r\n        .then(response => response.data) }\r\n}\r\n\r\n// types\r\ntype CommonResponseType<T> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n    fieldsErrors: []\r\n}\r\n\r\ntype GetUsersType = {\r\n    error: string | null\r\n    items: userType[]\r\n    totalCount: number\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nexport type FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3jGV2\",\"dialogsItem\":\"Dialogs_dialogsItem__2dRwl\",\"title\":\"Dialogs_title__3jMxE\",\"messages\":\"Dialogs_messages__2ztdh\",\"message__wrapper\":\"Dialogs_message__wrapper__1bjAC\",\"dialog__wrapper\":\"Dialogs_dialog__wrapper__2C_wh\",\"shadow__bottom\":\"Dialogs_shadow__bottom__2RkJz\",\"shadow__top\":\"Dialogs_shadow__top__2-5FM\",\"input_btn__block\":\"Dialogs_input_btn__block__1jth-\",\"icon\":\"Dialogs_icon__2bMe4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__eIQoS\",\"nav__list\":\"Navbar_nav__list__N0cbb\",\"nav__item\":\"Navbar_nav__item__1vKtK\"};","import React from \"react\";\r\nimport style from './Navbar.module.scss'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <ul className={style.nav__list}>\r\n                {/*<div className={style.link__item}>*/}\r\n                {/*    <img src=\"https://img.icons8.com/ios/30/ffffff/gender-neutral-user.png\" alt='' className={style.icon}/>*/}\r\n\r\n                {/*</div>*/}\r\n                <Link className={style.nav__item} to='/profile'>Profile</Link>\r\n                <Link className={style.nav__item} to='/dialogs'>Dialogs</Link>\r\n                <Link className={style.nav__item} to='/news'> News</Link>\r\n                <Link className={style.nav__item} to='/music'>Music</Link>\r\n                <Link className={style.nav__item} to='/settings'>Settings</Link>\r\n                <Link className={style.nav__item} to='/users'>Users</Link>\r\n                <Link className={style.nav__item} to='/login'>Login</Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport style from './Dialog.module.scss'\r\n\r\ntype objectType = {\r\n    avatar: string,\r\n    name: string,\r\n}\r\n\r\ntype dialogType = {\r\n    data: objectType\r\n    id: number\r\n    status: statusType,\r\n}\r\nexport const Dialog = ({data, id, status}: dialogType) => {\r\n    let path = `/dialogs/${id}`\r\n    return (\r\n        <Link to={path}>\r\n            <div className={style.dialog}>\r\n                <div className={style.avatar__wrapper}>\r\n                    <img src={data.avatar} alt=\"\"/>\r\n                    <span className={status.isOnline ? style.online : style.offline }></span>\r\n                </div>\r\n                <div className={style.status__block}>\r\n                    <div>{data.name}</div>\r\n                    <span className={style.status}>{status.title}</span>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n\r\n    )\r\n};","import style from \"../Messages.module.scss\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const MessageItemMy = ({name, message, id}: messagesType) => {\r\n    return (\r\n        <div className={style.messagesMy}>\r\n            <span className={style.message}>\r\n                {message}\r\n            </span>\r\n            <div>\r\n                <img\r\n                    src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSV83gjFPxbUtDH5iJuUHJHG45z--_hYg6GUA&usqp=CAU'\r\n                    alt=\"\"/>\r\n                <div>{name}</div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const MessageItem = ({name, message, id}: messagesType) => {\r\n    return (\r\n        <div className={style.messagesSubscriber}>\r\n            <div>\r\n                <img\r\n                    src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSV83gjFPxbUtDH5iJuUHJHG45z--_hYg6GUA&usqp=CAU'\r\n                    alt=\"\"/>\r\n                <div>{name}</div>\r\n            </div>\r\n            <span className={style.message}>\r\n                {message}\r\n            </span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {messagesType} from '../../../redux/state'\r\nimport {MessageItemMy, MessageItem} from \"./MessageItem/MessageItemMy\";\r\n\r\nexport const Messages = ({message, name, id}: messagesType) => {\r\n    if (name === 'my') {\r\n        return <MessageItemMy name={name} message={message} id={id}/>\r\n    } else {\r\n        return <MessageItem name={name} message={message} id={id}/>\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport style from './Dialogs.module.scss'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Field,InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { required } from \"../../utils/validators\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\ntype AddMessageFormData = {\r\n    dialogsMessage: string\r\n}\r\n\r\nexport const Dialogs = ({dialogs, messages,addMessage}: PropsType & dialogsPageType) => {\r\n\r\n    const onSubmit = (newMessage: AddMessageFormData) => {\r\n        addMessage(newMessage.dialogsMessage)\r\n    }\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItem}>\r\n                <h4 className={style.title}>Friends messages</h4>\r\n                <div className={style.dialog__wrapper}>\r\n                    {dialogs && dialogs.map((d, i) => <Dialog\r\n                        key={i} id={i} data={dialogs[i]}\r\n                        status={dialogs[i].status}/>)}\r\n                </div>\r\n                <div className={style.shadow__bottom}></div>\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div className={style.shadow__top}></div>\r\n                <div className={style.message__wrapper}>\r\n                    {messages && messages.map(m => <Messages\r\n                        message={m.message} name={m.name} id={m.id} key={m.id}/>)}\r\n                </div>\r\n                <AddMessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormData>>  = (props ) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.input_btn__block}>\r\n            <Field component={Input}\r\n                   name={'dialogsMessage'}\r\n                   validate={[required]}\r\n                   type=\"text\"\r\n                   />\r\n            <div className={style.icon}>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//HOC reduxForm - это контейнерная компонента\r\nconst AddMessageReduxForm = reduxForm<AddMessageFormData>({\r\n    // a unique name for the form\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({isAuth: state.auth.isAuth})\r\n\r\n// ComponentType - распознает тип компоненты, которая приходит в параметрах. с помощью дженерика <T> получаем компоненту\r\n// и передаем ее в ComponentType<T>\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        // деструктуризируем пропсы\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        //с помощью as T указываем, чтобы пропсы считывал из типизации как T\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessage} from \"../../redux/actionsCreator/dialogsAC\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport { AppStateType } from '../../redux/store';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):dialogsPageType & OwnPropsType => ({\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch):DispatchDialogsType => {\r\n    return {\r\n        addMessage: (value: string) => {\r\n            dispatch(addMessage(value))\r\n        },\r\n    }\r\n}\r\n\r\n// при помощи compose()() последовательно вызываем(оборачиваем) компоненту\r\n// compose<React.ComponentType> - указываем, что это компонента\r\n// types connect with help generic <>\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect<dialogsPageType,DispatchDialogsType,OwnPropsType, AppStateType>\r\n    (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n","import {ADD_MESSAGE} from \"../actions/actions\";\r\n\r\nexport const addMessage = (value: string) => ({type: ADD_MESSAGE, value})\r\n","export default __webpack_public_path__ + \"static/media/Spinner-1s-200px.6f589e28.gif\";","import React from 'react'\r\nimport preloader from \"../../../assets/Spinner-1s-200px.gif\";\r\nimport s from './Preloader.module.scss'\r\n\r\n\r\nconst Preloader = () => {\r\n    return  <div className={s.loading}>\r\n        <img  src={preloader} alt='preloader'/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","import React, {Suspense} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n// import Test from \"./Test\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    addPost,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateStatusProfile\r\n} from \"../../redux/actionsCreator/profileAC\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Profile = React.lazy(() => import('./Profile')); // Ленивая загрузка\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        // get match params - userId from browser\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            if(this.props.userId !== null) userId = this.props.userId\r\n            if(!userId) this.props.history.push('/login')\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            if(this.props.userId) {\r\n                this.props.getUserProfile(this.props.userId)\r\n                this.props.getUserStatus(this.props.userId)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Suspense - Delay in receiving data. show Preloader at boot time\r\n            <Suspense fallback={<Preloader/>}>\r\n                <Profile profile={this.props.profile}\r\n                         updateStatusProfile={this.props.updateStatusProfile}\r\n                         status={this.props.status}\r\n                />\r\n            </Suspense>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateProfileType => ({\r\n    posts: state.profilePage.posts,\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id\r\n})\r\n\r\n\r\n// withRouter - позволяет получить доступ к истории(свойствам) и ближайшему Route соответствию.\r\n// withRouter - будет передавать обновленные match,location,history - свойства, обернутому компоненту при каждом рендере\r\nlet withRouterHOC = withRouter(ProfileContainer)\r\n\r\nexport default compose(\r\n    connect<MapStateProfileType, DispatchProfileType, {}, AppStateType>\r\n    (MapStateToProps, {addPost, getUserProfile, getUserStatus, updateStatusProfile})\r\n)(withRouterHOC)\r\n\r\n// types\r\ntype ParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateProfileType = {\r\n    posts: postsType[]\r\n    profile: profileUserType | null | undefined\r\n    status: string\r\n    userId: number | null\r\n}\r\nexport type DispatchProfileType = {\r\n    addPost: (value: string) => void\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateStatusProfile: (status: string) => void\r\n}\r\nexport type OwnProfilePropsType = MapStateProfileType & DispatchProfileType\r\ntype PropsType = RouteComponentProps<ParamsType> & OwnProfilePropsType\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Users.module.scss'\r\n\r\n// нам нужна классовая компонента, когда мы хотим взаимодействовать с обьектом. и для избежания side Effect-а. в данной ситуации, для запроса на сервер\r\n// функциональная компонента - это читсая функция, которая принимает пропсы и возвращает jsx, при этом она не может никак менять состояние стейта\r\n// или делать запрос на сервер,\r\n// а лиш через dispatcher отсылать action для изменения состояния.\r\n\r\nconst defaultAvatar =\r\n    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU'\r\n\r\nconst Users = (props: propsType) => {\r\n\r\n    const [value, setValue] = useState<string>()\r\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let timeoutId:NodeJS.Timeout\r\n    const onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = e.currentTarget.value\r\n        setValue(currentValue)\r\n        clearTimeout(timeoutId)\r\n        timeoutId = setTimeout(() => {\r\n            props.setFilter(currentValue)\r\n        }, 500)\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.pagination}>\r\n            <div>\r\n                <input type=\"search\" value={value} onChange={onSearchChange}/>\r\n                {!props.users.length && <div>Users not found</div>}\r\n            </div>\r\n            <div>\r\n                {pages.map(p => <span onClick={() => props.onPageChanged(p)}\r\n                                      className={props.currentPage === p ? s.selected : ''} key={p}>{p}</span>)}\r\n            </div>\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={`/profile/${u.id}`}>\r\n                            <img src={u.photos.small ?\r\n                                u.photos.small : defaultAvatar} alt={u.photos.small ? u.photos.small : defaultAvatar}/>\r\n                        </NavLink>\r\n\r\n                    </div>\r\n                    <div>\r\n                        {u.followed ?\r\n                            <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {props.unfollow(u.id)}}>Unfollow</button> :\r\n                            <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <div>{\"u.location.city\"}</div>\r\n                    <div>{\"u.location.country\"}</div>\r\n                </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default Users\r\n\r\n//types\r\ntype propsType = {\r\n    users: userType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (value: number) => void\r\n    follow: (uId: number) => void\r\n    unfollow: (uId: number) => void\r\n    followingInProgress: Array<number>\r\n    setFilter: (value: string) => void\r\n    filter: string\r\n}\r\n","import {\r\n    FOLLOW,\r\n    UNFOLLOW,\r\n    SET_USERS,\r\n    SET_CURRENT_PAGE,\r\n    SET_TOTAL_USERS,\r\n    TOGGLE_IS_FETCHING,\r\n    TOGGLE_IS_FOLLOWING_PROGRESS\r\n} from \"../actions/actions\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport { ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\n\r\n// actions\r\nexport const followAC = (uId: number): followActionType => ({type: FOLLOW, uId})\r\nexport const unfollowAC = (uId: number): unFollowActionType => ({type: UNFOLLOW, uId})\r\nexport const setUsersAC = (users: userType[]): setUsersActionType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): setPageActionType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersActionType => ({type: SET_TOTAL_USERS, totalCount})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number): toggleFollowingInProgress =>\r\n    ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\nexport const setFilter = (filter: string): setFilterType => ({type: 'SET_FILTER', filter})\r\n\r\n\r\n// thunks\r\nexport const usersRequest = (page: number,pageSize: number):ThunkType => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n\r\n        usersAPI.getUsers(page, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsersAC(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (userId: number):ThunkType => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId))\r\n        usersAPI.userFollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(followAC(userId))\r\n                    dispatch(toggleFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const unfollow = (userId: number):ThunkType => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId))\r\n        usersAPI.userUnfollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(unfollowAC(userId))\r\n                    dispatch(toggleFollowingInProgress(false, userId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, UsersActionTypes>\r\ntype followActionType = {\r\n    type: typeof FOLLOW\r\n    uId: number\r\n}\r\n\r\ntype unFollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    uId: number\r\n}\r\n\r\ntype setPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\n\r\ntype setUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: userType[]\r\n}\r\ntype setTotalUsersActionType = {\r\n    type: typeof SET_TOTAL_USERS\r\n    totalCount: number\r\n}\r\ntype toggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\n\r\ntype toggleFollowingInProgress = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\ntype setFilterType = {\r\n    type: 'SET_FILTER'\r\n    filter: string\r\n}\r\n\r\nexport type UsersActionTypes =\r\n    followActionType |\r\n    unFollowActionType |\r\n    setPageActionType |\r\n    setUsersActionType |\r\n    setTotalUsersActionType |\r\n    toggleIsFetchingType |\r\n    toggleFollowingInProgress |\r\n    setFilterType","import {AppStateType} from \"../store\";\r\n// import {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state: AppStateType) => state.usersPage.users\r\n\r\n// library reselect\r\n// takes simple selectors (dependencies) and transfer into function parameters are what ordinary return selectors.\r\n// Selectors can compute derived data, allowing Redux to store the minimal possible state.\r\n// Selectors are efficient. A selector is not recomputed unless one of its arguments changes.\r\n// Selectors are composable. They can be used as input to other selectors.\r\n// export const getUsersSelector = createSelector(getUsers,(users) => {\r\n//     return users.filter(u => true)\r\n// })\r\n\r\nexport const getFilteredUsers = (state: AppStateType) => state.usersPage.users\r\n    .filter(u => u.name.toLowerCase().indexOf(state.usersPage.filter.toLowerCase()) > -1)\r\n\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\r\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\r\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\r\nexport const getIsFetching = (state: AppStateType) => state.usersPage.isFetching\r\nexport const getFollowingInProgress= (state: AppStateType) => state.usersPage.followingInProgress","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from 'redux';\r\nimport Users from \"./Users\";\r\nimport {\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleFollowingInProgress,\r\n    usersRequest, follow, unfollow, setFilter\r\n} from \"../../redux/actionsCreator/usersAC\";\r\nimport {AppStateType} from '../../redux/store';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {\r\n    getCurrentPage, getFilteredUsers, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n} from \"../../redux/reducers/users-selector\";\r\n\r\n\r\n// нам нужна классовая компонента, когда мы хотим взаимодействовать с обьектом. и для избежания side Effect-а. в данной\r\n// ситуации, для запроса на сервер\r\n// функциональная компонента - это чистая функция, которая принимает пропсы и возвращает jsx, при этом она не может\r\n// никак менять состояние стейта\r\n// или делать запросы на сервер,\r\n// а лиш через dispatcher отправлять action для изменения состояния.\r\n\r\nclass UsersContainer extends React.Component<usersType & CallbacksType> {\r\n    //componentDidMount() вызывается сразу после монтирования (то есть, вставки компонента в DOM)\r\n    // В этом методе должны происходить действия, которые требуют наличия DOM-узлов.\r\n    componentDidMount() {\r\n        this.props.usersRequest(this.props.currentPage, this.props.pageSize)\r\n    }\r\n    onPageChanged = (pageNumber: number) => {\r\n        if (this.props.setCurrentPage) {\r\n            this.props.setCurrentPage(pageNumber)\r\n        }\r\n        this.props.usersRequest(pageNumber, this.props.pageSize)\r\n    }\r\n    userFollow = (userId: number) => {\r\n        this.props.follow(userId)\r\n    }\r\n    userUnfollow = (userId: number) => {\r\n        this.props.unfollow(userId)\r\n    }\r\n\r\n    // объязательный метод render()\r\n    render() {\r\n        console.log('users')\r\n        return (<>\r\n\r\n                {this.props.isFetching ? <Preloader/> :\r\n                    <Users\r\n                        users={this.props.users}\r\n                        totalUsersCount={this.props.totalUsersCount}\r\n                        pageSize={this.props.pageSize}\r\n                        currentPage={this.props.currentPage}\r\n                        follow={this.userFollow}\r\n                        unfollow={this.userUnfollow}\r\n                        onPageChanged={this.onPageChanged}\r\n                        followingInProgress={this.props.followingInProgress}\r\n                        setFilter={this.props.setFilter}\r\n                        filter={this.props.filter}\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): usersType => {\r\n    console.log('mapStateToProps users')\r\n    return {\r\n        filter: state.usersPage.filter,\r\n        users: getFilteredUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<usersType, CallbacksType, {}, AppStateType>\r\n    (mapStateToProps, {\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleFollowingInProgress,\r\n        usersRequest,\r\n        follow,\r\n        unfollow,\r\n        setFilter\r\n    })\r\n)(UsersContainer)\r\n\r\n// types\r\ntype CallbacksType = {\r\n    setCurrentPage?: (currentPage: number) => void\r\n    setTotalUsersCount?: (totalCount: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    usersRequest: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setFilter: (filter: string) => void\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport style from './Header.module.scss'\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nexport const Header = ({login, isAuth, logout}: PropsType) => {\r\n    return (\r\n        <header className={style.header}>\r\n            <img src=\"https://www.designlime.co.uk/wp-content/uploads/2020/07/social-network-icon-png.png\"\r\n                alt=\"\"/>\r\n                <div className={style.login}>\r\n                    {isAuth ? <div><button className={style.logout} onClick={logout}>Logout</button><span>{login}</span></div> : <NavLink to='/login'>Login</NavLink>}\r\n                </div>\r\n        </header>\r\n    )\r\n}","import { SET_USER_DATA} from \"../actions/actions\";\r\nimport {authMe, FormDataType} from \"../../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n// actions\r\nexport const setAuthUserDataAC = ({email,id,login,isAuth}:AuthStateType):authUserACType =>\r\n    ({ type: SET_USER_DATA, payload: {email, id,  login, isAuth} })\r\n\r\n// thunks\r\nexport const auth = ():ThunkType => {\r\n    return (dispatch) => {\r\n        return authMe.auth()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let { email, id, login } = data.data\r\n                    let isAuth = true\r\n                    dispatch(setAuthUserDataAC({email, id, login, isAuth}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const login = (formData: FormDataType):ThunkType => {\r\n    return (dispatch) => {\r\n        authMe.login(formData)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(auth())\r\n                } else {\r\n                    let error = data.messages.length > 0 ? data.messages[0] : 'Email or password is wrong'\r\n                    let action:any = stopSubmit('login',{_error: error})\r\n                    dispatch(action);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const logout = ():ThunkType => {\r\n    return (dispatch) => {\r\n        authMe.logout()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let isAuth = false\r\n                    let email = null\r\n                    let id = null\r\n                    let login = null\r\n                    dispatch(setAuthUserDataAC({email,id,login, isAuth}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, authUserACType>\r\nexport type AuthStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type authUserACType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: AuthStateType\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logout} from \"../../redux/actionsCreator/authAC\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType & CallbacksType> {\r\n    logout = () => {\r\n        this.props.logout()\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    render() {\r\n        return (\r\n            <Header logout={this.logout} login={this.props.login} isAuth={this.props.isAuth}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): HeaderPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n//types\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype CallbacksType = {\r\n    logout: () => void\r\n}\r\n\r\nexport default connect<HeaderPropsType, CallbacksType, {}, AppStateType>(mapStateToProps, {logout})(HeaderContainer)","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {login} from \"../../redux/actionsCreator/authAC\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>>  = (props) => {\r\n    //e.preventDefault\r\n    // get all form data and put them to object\r\n    // props.onSubmit(formData)\r\n    return (<form onSubmit={props.handleSubmit}>\r\n                <div><span>{props.error}</span></div>\r\n                <div>\r\n                    <Field component={Input}\r\n                            name={'email'}\r\n                            type=\"text\"\r\n                            placeholder={'Login'}\r\n                            validate={[required]}\r\n                /></div>\r\n                <div><Field component={Input}\r\n                            name={'password'}\r\n                            type=\"password\"\r\n                            placeholder={'Password'}\r\n                            validate={[required]}\r\n                /></div>\r\n                <div><Field component={Input}\r\n                            name={'rememberMe'}\r\n                            type=\"checkbox\"/>\r\n                </div>\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\n//HOC reduxForm - это контейнерная компонента\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props: MapDispatchToProps & MapStateToProps) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (<div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n// types\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    login: (formData: FormDataType) => void\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, AppStateType>(\r\n    mapStateToProps, {login}\r\n)(Login)\r\n","import React from 'react';\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\r\nimport DialogsContainer  from './components/Dialogs/DialogsContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {initializeApp} from \"./redux/actionsCreator/appAC\";\r\n\r\nclass App extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp() //\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"app-wrapper\">\r\n                    <HeaderContainer/>\r\n                    <div className=\"wrapper\">\r\n                        <Navbar/>\r\n                        <main className=\"content\">\r\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                            <Route path={\"/\"} exact render={() => <Redirect to={\"/profile\"}/>}/>\r\n                            <Route exact path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login\" render={() => <Login/>}/>\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {initialized: state.app.initialized}\r\n}\r\n\r\nexport default connect(mapStateToProps,{initializeApp})(App);\r\n\r\ntype PropsType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n","import {INITIALIZED} from \"../actions/actions\";\r\nimport {auth} from \"./authAC\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\n\r\n// actions\r\nexport const initializedSuccess = () =>\r\n    ({type: INITIALIZED}) as const\r\n\r\nexport const fake = () =>\r\n    ({type: 'FAKE'}) as const\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let res = dispatch(auth())\r\n    Promise.all([res]).then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\nexport type ActionsType =\r\n    ReturnType<typeof initializedSuccess> |\r\n    ReturnType<typeof fake>\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_POST, SET_STATUS, SET_USER_PROFILE} from \"../actions/actions\";\r\nimport {ProfileACTypes} from \"../actionsCreator/profileAC\";\r\n\r\nlet initialState: profilePageType = {\r\n    posts: [\r\n        { id: 1, message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet aspernatur at commodi consequuntur corporis dolore ex nemo nisi quod suscipit!', likesCount: 11 },\r\n        { id: 2, message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet aspernatur at commodi consequuntur corporis dolore ex nemo nisi quod suscipit!', likesCount: 2 },\r\n        { id: 3, message: 'I\\'m Vova', likesCount: 111 },\r\n        { id: 4, message: 'Goodbye', likesCount: 1 },\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n};\r\n\r\n// Reducer - это чистая функция, которая принимает стейт, актион\r\n// если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst profileReducer = (state: profilePageType = initialState, action: ProfileACTypes): profilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let messageBody = action.value;\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, { id: 4, message: messageBody, likesCount: 0 }]\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return { ...state, profile: {...action.profile}}\r\n        case SET_STATUS:\r\n            return { ...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default profileReducer;\r\n\r\n\r\n","import { ADD_MESSAGE} from \"../actions/actions\";\r\n\r\nconst initialState: dialogsPageType = {\r\n    dialogs: [\r\n        {\r\n            id: '1',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSV83gjFPxbUtDH5iJuUHJHG45z--_hYg6GUA&usqp=CAU',\r\n            name: 'Sveta',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: false\r\n            }\r\n        },\r\n        {\r\n            id: '2',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5g67tZkLuNcbMvMPfjAO08mstu5QTUr_y5g&usqp=CAU',\r\n            name: 'Angelina',\r\n            status: {\r\n                title: 'Angelina left 7 minute ago',\r\n                isOnline: false\r\n            }\r\n        },\r\n        {\r\n            id: '3',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS3AVHYXRxxtX6-fzIMlSWLwqMDKCMVudzdiA&usqp=CAU',\r\n            name: 'Artem',\r\n            status: {\r\n                title: 'Angelina left 1 day ago',\r\n                isOnline: false\r\n            }\r\n        },\r\n        {\r\n            id: '4',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU',\r\n            name: 'Vova',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            }\r\n        },\r\n        {\r\n            id: '5',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU',\r\n            name: 'Naytin',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            }\r\n        },\r\n        {\r\n            id: '6',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5g67tZkLuNcbMvMPfjAO08mstu5QTUr_y5g&usqp=CAU',\r\n            name: 'Svet_v',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            }\r\n        },\r\n        {\r\n            id: '7',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5g67tZkLuNcbMvMPfjAO08mstu5QTUr_y5g&usqp=CAU',\r\n            name: '@Lera',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            }\r\n        },\r\n        {\r\n            id: '8',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU',\r\n            name: 'Valera',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            }\r\n        },\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hello, how are you?', name: 'Sveta' },\r\n        { id: 2, message: 'I,m a good student', name: 'my' },\r\n        { id: 3, message: 'you, how are you', name: 'Alina' },\r\n        { id: 4, message: 'goodbye my friend', name: 'my' },\r\n        { id: 5, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 6, message: 'goodbye my friend', name: 'my' },\r\n        { id: 7, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 8, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 9, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 10, message: 'goodbye my friend', name: 'Artem' },\r\n    ]\r\n}\r\n\r\n// // Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// // если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// // измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst dialogsReducer = (state: dialogsPageType = initialState, action: actionType): dialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let messageText = action.value;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, { id: 11, message: messageText ? messageText : '', name: 'my' }]\r\n            }\r\n        default:\r\n            return state // если ничего не изменилось, по дефолту возвращаем неизмененный стейт\r\n\r\n    }\r\n}\r\nexport default dialogsReducer;\r\n\r\n\r\n","import {\r\n    FOLLOW,\r\n    UNFOLLOW,\r\n    SET_USERS,\r\n    SET_CURRENT_PAGE,\r\n    SET_TOTAL_USERS,\r\n    TOGGLE_IS_FETCHING,\r\n    TOGGLE_IS_FOLLOWING_PROGRESS\r\n} from \"../actions/actions\";\r\nimport {UsersActionTypes} from \"../actionsCreator/usersAC\";\r\n\r\nconst initialState = {\r\n    filter: '',\r\n    users: [\r\n        // {id: 1, avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU', followed: false, fullName: 'Vova', status: 'Status', location: {city: 'Chernihiv', country: 'Ukraine'} },\r\n        // {id: 2, avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU', followed: true, fullName: 'Sveta', status: 'Status', location: {city: 'Chernihiv', country: 'Ukraine'} },\r\n        // {id: 3, avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU', followed: false, fullName: 'John', status: 'Status', location: {city: 'Chicago', country: 'US'} }\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 2,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\n// // Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// // если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// // измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst usersReducer = (state: usersType = initialState, action: UsersActionTypes): usersType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.uId ? {...u, followed: true} : u)\r\n            }\r\n        // если в case нету ретурна, то необходимо делать брейк, чтобы case не проваливался дальше.\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.uId ? {...u, followed: false} : u)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n\r\n        case SET_TOTAL_USERS:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount > 100 ? 100 : action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.filter\r\n            }\r\n        default:\r\n            return state // если ничего не изменилось, по дефолту возвращаем неизмененный стейт\r\n\r\n    }\r\n}\r\nexport default usersReducer;\r\n\r\n\r\n\r\n\r\n","import {SET_USER_DATA} from \"../actions/actions\";\r\nimport {AuthStateType, authUserACType} from \"../actionsCreator/authAC\";\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\n// Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst authReducer = (state: AuthStateType = initialState, action: authUserACType):AuthStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return { ...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {INITIALIZED} from \"../actions/actions\";\r\nimport {ActionsType} from '../actionsCreator/appAC'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    fake: 10\r\n}\r\n\r\n\r\n\r\n// Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED:\r\n            return {...state, initialized: true}\r\n        case 'FAKE':\r\n            return {...state, fake: state.fake + 1}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n    fake: number\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import {createStore, combineReducers,applyMiddleware} from \"redux\";\r\nimport profileReducer from \"./reducers/profileReducer\";\r\nimport dialogsReducer from \"./reducers/dialogsReducer\";\r\nimport usersReducer from \"./reducers/usersReducer\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport appReducer from \"./reducers/appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer, // зосдаем ветку form и передаем formReducer из 'redux-form'\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers // (globalstate: AppStateType) => AppStateType\r\n\r\nexport type AppStateType = ReturnType<RootReducerType> // get type for all state with helps ReturnType from RootReducerType\r\n\r\n//for redux-devtool\r\n// @ts-ignore\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\r\nconst store = createStore(reducers,composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport {fake} from \"./redux/actionsCreator/appAC\";\r\n\r\n// setInterval(() => {\r\n//     store.dispatch(fake())\r\n// }, 1000)\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2K2Wj\",\"avatar__wrapper\":\"Dialog_avatar__wrapper__LlKbk\",\"online\":\"Dialog_online__1vF4A\",\"offline\":\"Dialog_offline__3Lbjh\",\"status__block\":\"Dialog_status__block__3jN2j\",\"status\":\"Dialog_status__1SOyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3I3br\",\"error\":\"FormsControls_error__k7wEJ\",\"errorMessage\":\"FormsControls_errorMessage__zv9jX\",\"formSummaryError\":\"FormsControls_formSummaryError__LJwKW\"};","import React from 'react'\r\nimport style from './FormsControls.module.scss'\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n        <input className={`${style.formControl} ${hasError ? style.error : ''}`} {...input} {...props}/>\r\n        {hasError && <span className={style.errorMessage}>{meta.error}</span>}\r\n    </>\r\n}\r\n\r\nexport const TextArea = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n            <textarea className={`${style.formControl} ${hasError ? style.error : ''}`} {...input} {...props}/>\r\n            {hasError && <span className={style.errorMessage}>{meta.error}</span>}\r\n        </>\r\n}\r\n\r\n\r\n","export const required = (value: string): string | undefined => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): string | undefined => {\r\n        if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n        return undefined\r\n}\r\n\r\n","import {ADD_POST, SET_STATUS, SET_USER_PROFILE} from \"../actions/actions\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\nimport {profileAPI} from \"../../api/api\";\r\n\r\n// actions\r\nexport const addPost = (value: string) => ({type: ADD_POST, value}) as const\r\nexport const setUserProfile = (profile: profileUserType) => ({type: SET_USER_PROFILE, profile}) as const\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}) as const\r\n\r\n// thunks\r\nexport const getUserProfile = (userId: number): ThunkType =>\r\n    (dispatch) => {\r\n        profileAPI.getProfile(userId)\r\n            .then(data => dispatch(setUserProfile(data)))\r\n    }\r\n\r\nexport const getUserStatus = (userId: number): ThunkType =>\r\n    (dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(data => dispatch(setStatus(data)))\r\n    }\r\n\r\nexport const updateStatusProfile = (status: string): ThunkType =>\r\n    (dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(data => {\r\n                if (data.resultCode === 0) dispatch(setStatus(status))\r\n            })\r\n    }\r\n\r\n\r\n// types\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ProfileACTypes>\r\nexport type ProfileACTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesSubscriber\":\"Messages_messagesSubscriber__2Dd67\",\"messagesMy\":\"Messages_messagesMy__2C2Br\",\"message\":\"Messages_message__2uG39\"};","export const ADD_MESSAGE = 'DIALOG/ADD_MESSAGE';\r\n\r\nexport const ADD_POST = 'PROFILE/ADD_POST';\r\nexport const SET_STATUS = 'SET_STATUS';\r\n\r\nexport const SET_USER_PROFILE = 'USER/SET_USER_PROFILE';\r\nexport const FOLLOW = 'USERS/FOLLOW'\r\nexport const UNFOLLOW = 'USERS/UNFOLLOW'\r\nexport const SET_USERS = 'USERS/SET_USERS'\r\nexport const SET_CURRENT_PAGE = 'USERS/SET_CURRENT_PAGE'\r\nexport const SET_TOTAL_USERS = 'USERS/SET_TOTAL_USERS'\r\nexport const TOGGLE_IS_FETCHING = 'USERS/TOGGLE_IS_FETCHING'\r\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS'\r\nexport const SET_USER_DATA = 'USERS/SET_USER_DATA';\r\n\r\nexport const INITIALIZED= 'AUTH/INITIALIZED';\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__77AOv\",\"login\":\"Header_login__VEQmZ\",\"logout\":\"Header_logout__2iYAC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Users_pagination__1md1f\",\"selected\":\"Users_selected__Kjcvr\"};"],"sourceRoot":""}