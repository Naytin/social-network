{"version":3,"sources":["components/common/MessageInform/MessageInform.module.scss","components/common/Preloader/Preloader.module.scss","components/common/Button/Button.module.scss","components/Login/Login.module.scss","api/api.ts","components/Dialogs/Dialogs.module.scss","components/Users/Users.module.scss","components/common/Button/Button.tsx","components/Navbar/Navbar.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Messages/MessageItem/MessageItemMy.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/actionsCreator/dialogsAC.ts","assets/Spinner-1s-200px.gif","components/common/Preloader/Preloader.tsx","components/Profile/ProfileContainer.tsx","components/Users/Users.tsx","redux/actionsCreator/usersAC.ts","redux/reducers/users-selector.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/actionsCreator/authAC.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","redux/actionsCreator/appAC.ts","reportWebVitals.ts","redux/reducers/profileReducer.ts","redux/reducers/dialogsReducer.ts","redux/reducers/usersReducer.ts","redux/reducers/authReducer.ts","redux/reducers/appReducer.ts","redux/store.ts","index.tsx","components/Dialogs/Dialog/Dialog.module.scss","components/common/FormsControls/FormsControls.module.scss","components/Header/Header.module.scss","components/Navbar/Navbar.module.scss","utils/validators.tsx","components/common/FormsControls/FormsControls.tsx","components/common/MessageInform/MessageInform.tsx","redux/actionsCreator/profileAC.ts","components/Dialogs/Messages/Messages.module.scss","redux/actions/actions.js"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","userFollow","userId","post","userUnfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authMe","auth","login","formData","logout","Button","React","memo","red","className","restProps","finalClassName","s","default","Navbar","style","nav","nav__list","nav__item","to","Dialog","getUserId","path","name","dialog","onClick","avatar__wrapper","src","avatar","alt","isOnline","online","offline","status__block","title","MessageItemMy","message","messagesMy","MessageItem","messagesSubscriber","Messages","id","Dialogs","dialogs","addMessage","messages","useState","setUserId","onSubmit","useCallback","newMessage","dialogsMessage","userMessage","filter","u","map","mes","m","alarm","dialogsItem","dialog__wrapper","d","i","shadow__bottom","shadow__top","message__wrapper","AddMessageReduxForm","AddMessageForm","props","handleSubmit","input_btn__block","Field","component","Input","validate","required","type","icon","reduxForm","form","DialogsContainer","compose","connect","state","dialogsPage","dispatch","value","ADD_MESSAGE","Preloader","loading","preloader","Profile","lazy","ProfileContainer","this","match","params","getUserProfile","getUserStatus","prevProps","prevState","snapshot","fallback","profile","updateStatusProfile","Component","withRouterHOC","withRouter","posts","profilePage","addPost","defaultAvatar","Users","wrapper","users","card__item","photos","small","view__profile","followed","disabled","followingInProgress","some","unfollow","follow","setCurrentPage","SET_CURRENT_PAGE","setTotalUsersCount","totalCount","SET_TOTAL_USERS","toggleIsFetching","isFetching","TOGGLE_IS_FETCHING","toggleFollowingInProgress","TOGGLE_IS_FOLLOWING_PROGRESS","getFilteredUsers","usersPage","toLowerCase","indexOf","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","currentValue","timeoutId","pagesCount","pages","onPageChanged","pageNumber","usersRequest","onSearchChange","e","setState","currentTarget","clearTimeout","setTimeout","setFilter","Math","ceil","temp","push","length","pagination","input__wrapper","placeholder","input__item","onChange","MessageInform","pagination_wrap__btn","p","selected","PureComponent","page","items","SET_USERS","catch","alert","uId","resultCode","FOLLOW","UNFOLLOW","Header","isAuth","header","logo","loginContainer","avatar_container","header__avatar","setAuthUserDataAC","email","SET_USER_DATA","payload","HeaderContainer","LoginReduxForm","error","position","textAlign","action","stopSubmit","_error","App","initializeApp","initialized","render","exact","app","res","Promise","all","INITIALIZED","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","likesCount","profileReducer","ADD_POST","messageBody","SET_USER_PROFILE","SET_STATUS","dialogsReducer","messageText","usersReducer","authReducer","fake","appReducer","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","StrictMode","document","getElementById","input","meta","hasError","touched","formControl","errorMessage","TextArea","box__message","setUserProfile","setStatus"],"mappings":"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","file":"static/js/main.04daa4f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box__message\":\"MessageInform_box__message__yVfpa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Preloader_loading__2PkkU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3ajGj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__2rMYg\"};","import axios from \"axios\";\r\n\r\n\r\n// создаем instance axios и настраиваем один раз, чтобы не дублировать код при каждом запросе.\r\nconst instance = axios.create({\r\n    // withCredentials - Свойство withCredentials это Boolean который определяет, должны ли\r\n    // создаваться кросс-доменные Access-Control запросы с использованием таких идентификационных данных как cookie\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd',\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number){\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data) },\r\n    userFollow(userId: number) {\r\n        return instance.post<CommonResponseType<boolean>>(`follow/${userId}`)\r\n            .then(response => response.data) },\r\n    userUnfollow(userId: number) {\r\n        return instance.delete<CommonResponseType<boolean>>(`follow/${userId}`)\r\n            .then(response => response.data) }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<profileUserType>(`profile/${userId}`)\r\n            .then(response => response.data) },\r\n    getStatus(userId: number) {\r\n        return instance.get<any>(`profile/status/${userId}`)\r\n        .then(response => response.data) },\r\n    updateStatus(status: string) {\r\n        return instance.put<any>(`profile/status`, { status: status })\r\n        .then(response => response.data) },\r\n}\r\n\r\nexport const authMe = {\r\n    auth() { return instance.get<CommonResponseType<AuthMeType>>('auth/me')\r\n        .then(response => response.data) },\r\n    login(formData: FormDataType) { return instance.post<CommonResponseType<AuthMeType>>('auth/login', {...formData})\r\n        .then(response => response.data) },\r\n    logout() { return instance.delete<CommonResponseType<{}>>('auth/login')\r\n        .then(response => response.data) }\r\n}\r\n\r\n// types\r\ntype CommonResponseType<T> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n    fieldsErrors: []\r\n}\r\n\r\ntype GetUsersType = {\r\n    error: string | null\r\n    items: userType[]\r\n    totalCount: number\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nexport type FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3jGV2\",\"dialogsItem\":\"Dialogs_dialogsItem__2dRwl\",\"title\":\"Dialogs_title__3jMxE\",\"messages\":\"Dialogs_messages__2ztdh\",\"message__wrapper\":\"Dialogs_message__wrapper__1bjAC\",\"dialog__wrapper\":\"Dialogs_dialog__wrapper__2C_wh\",\"shadow__bottom\":\"Dialogs_shadow__bottom__2RkJz\",\"shadow__top\":\"Dialogs_shadow__top__2-5FM\",\"input_btn__block\":\"Dialogs_input_btn__block__1jth-\",\"icon\":\"Dialogs_icon__2bMe4\",\"alarm\":\"Dialogs_alarm__2hSzR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Users_pagination__1md1f\",\"pagination_wrap__btn\":\"Users_pagination_wrap__btn__3eQSK\",\"selected\":\"Users_selected__Kjcvr\",\"input__wrapper\":\"Users_input__wrapper__1_EmY\",\"input__item\":\"Users_input__item__2OSVe\",\"view__profile\":\"Users_view__profile__2__7P\",\"wrapper\":\"Users_wrapper__1r298\",\"card__item\":\"Users_card__item__2s5Y3\",\"name\":\"Users_name__1Eiii\",\"search__wrapper\":\"Users_search__wrapper__1W-d4\",\"search__item\":\"Users_search__item__23HnV\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./Button.module.scss\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst Button: React.FC<SuperButtonPropsType> = React.memo((\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    // const finalClassName = s.default;\r\n    const finalClassName = `${className ? className : ''} ${s.default}`;\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n})\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport style from './Navbar.module.scss'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <ul className={style.nav__list}>\r\n                <Link className={`${style.nav__item} icon-profile`} to='/profile'/>\r\n                <Link className={`${style.nav__item} icon-commenting-o`} to='/dialogs'/>\r\n                {/*<Link className={style.nav__item} to='/news'> News</Link>*/}\r\n                {/*<Link className={style.nav__item} to='/music'>Music</Link>*/}\r\n                {/*<Link className={style.nav__item} to='/settings'>Settings</Link>*/}\r\n                <Link className={`${style.nav__item} icon-group`} to='/users'/>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport style from './Dialog.module.scss'\r\n\r\ntype objectType = {\r\n    avatar: string,\r\n    name: string,\r\n}\r\n\r\ntype dialogType = {\r\n    data: objectType\r\n    id: number\r\n    status: statusType,\r\n    userId: string\r\n    getUserId: (userId: string) => void\r\n}\r\nexport const Dialog = React.memo(({data, status, userId, getUserId}: dialogType) => {\r\n    let path = `/dialogs/user/${data.name}`\r\n    const getUserIdHandler = () => {\r\n        getUserId(userId)\r\n    }\r\n    return (\r\n        <Link to={path}>\r\n            <div className={style.dialog} onClick={getUserIdHandler}>\r\n                <div className={style.avatar__wrapper}>\r\n                    <img src={data.avatar} alt=\"\"/>\r\n                    <span className={status.isOnline ? style.online : style.offline }></span>\r\n                </div>\r\n                <div className={style.status__block}>\r\n                    <div>{data.name}</div>\r\n                    <span className={style.status}>{status.title}</span>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n\r\n    )\r\n});","import style from \"../Messages.module.scss\";\r\nimport React from \"react\";\r\n\r\ntype messagesType = {\r\n    id: number,\r\n    message: string,\r\n    name: string,\r\n    avatar?: string\r\n}\r\nexport const MessageItemMy = React.memo(({name, message}: messagesType) => {\r\n    return (\r\n        <div className={style.messagesMy}>\r\n            <span className={style.message}>\r\n                {message}\r\n            </span>\r\n            <div>\r\n                <img\r\n                    src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU'}\r\n                    alt=\"\"/>\r\n                <div>{name}</div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nexport const MessageItem = React.memo(({name, message, avatar}: messagesType) => {\r\n    return (\r\n        <div className={style.messagesSubscriber}>\r\n            <div>\r\n                <img\r\n                    src={avatar}\r\n                    alt=\"\"/>\r\n                <div>{name}</div>\r\n            </div>\r\n            <span className={style.message}>\r\n                {message}\r\n            </span>\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\n","import React from \"react\";\r\nimport {MessageItemMy, MessageItem} from \"./MessageItem/MessageItemMy\";\r\n\r\ntype messagesType = {\r\n    id: number,\r\n    message: string,\r\n    name: string,\r\n    avatar: string\r\n}\r\nexport const Messages = React.memo(({message, name, id,avatar}: messagesType) => {\r\n    if (name === 'Naytin') {\r\n        return <MessageItemMy name={name} message={message} id={id}/>\r\n    } else {\r\n        return <MessageItem avatar={avatar} name={name} message={message} id={id}/>\r\n    }\r\n})\r\n","import React, {useState} from \"react\";\r\nimport style from './Dialogs.module.scss'\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {Field,InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { required } from \"../../utils/validators\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\ntype AddMessageFormData = {\r\n    dialogsMessage: string\r\n}\r\n\r\nexport const Dialogs = React.memo(({dialogs, messages,addMessage}: PropsType & dialogsPageType) => {\r\n    const [userId, setUserId] = useState<string>('')\r\n    const onSubmit = React.useCallback((newMessage: AddMessageFormData) => {\r\n        addMessage(newMessage.dialogsMessage)\r\n    },[])\r\n\r\n\r\n    const getUserId = React.useCallback((userId: string) => {\r\n        setUserId(userId)\r\n    },[])\r\n\r\n    let userMessage = dialogs.filter(u => u.id === userId)\r\n        .map(mes => mes.messages ?\r\n            mes.messages?.map(m =>\r\n            <Messages avatar={mes.avatar} message={m.message} name={m.name} id={m.id} key={m.id}/>) :\r\n            <div className={style.alarm}>you have no correspondence with this user yet</div>)\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItem}>\r\n                <h4 className={style.title}>Friends messages</h4>\r\n                <div className={style.dialog__wrapper}>\r\n                    {dialogs && dialogs.map((d, i) => <Dialog\r\n                        key={i} id={i} userId={d.id} data={dialogs[i]}\r\n                        status={dialogs[i].status}\r\n                        getUserId={getUserId}\r\n                    />)}\r\n                </div>\r\n                <div className={style.shadow__bottom}/>\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div className={style.shadow__top}/>\r\n                <div className={style.message__wrapper}>\r\n                    {userMessage}\r\n                </div>\r\n                <AddMessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormData>>  = React.memo((props ) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.input_btn__block}>\r\n            <Field component={Input}\r\n                   name={'dialogsMessage'}\r\n                   validate={[required]}\r\n                   type=\"text\"\r\n                   />\r\n            <div className={style.icon}>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\n\r\n//HOC reduxForm - это контейнерная компонента\r\nconst AddMessageReduxForm = reduxForm<AddMessageFormData>({\r\n    // a unique name for the form\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessage} from \"../../redux/actionsCreator/dialogsAC\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport { AppStateType } from '../../redux/store';\r\n// import {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst mapStateToProps = (state: AppStateType):dialogsPageType & {} => ({\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch):DispatchDialogsType => {\r\n    return {\r\n        addMessage: (value: string) => {\r\n            dispatch(addMessage(value))\r\n        },\r\n    }\r\n}\r\n\r\n// при помощи compose()() последовательно вызываем(оборачиваем) компоненту\r\n// compose<React.ComponentType> - указываем, что это компонента\r\n// types connect with help generic <>\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect<dialogsPageType,DispatchDialogsType,{}, AppStateType>\r\n    (mapStateToProps, mapDispatchToProps),\r\n    // withAuthRedirect,\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n","import {ADD_MESSAGE} from \"../actions/actions\";\r\n\r\nexport const addMessage = (value: string) => ({type: ADD_MESSAGE, value})\r\n","export default __webpack_public_path__ + \"static/media/Spinner-1s-200px.6f589e28.gif\";","import React from 'react'\r\nimport preloader from \"../../../assets/Spinner-1s-200px.gif\";\r\nimport s from './Preloader.module.scss'\r\n\r\n\r\nconst Preloader = () => {\r\n    return  <div className={s.loading}>\r\n        <img  src={preloader} alt='preloader'/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","import React, {Suspense} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n// import Test from \"./Test\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    addPost,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateStatusProfile\r\n} from \"../../redux/actionsCreator/profileAC\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Profile = React.lazy(() => import('./Profile')); // Ленивая загрузка\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        // get match params - userId from browser\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            if(this.props.userId !== null) userId = this.props.userId\r\n        }\r\n        if (userId) {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            if(this.props.userId) {\r\n                this.props.getUserProfile(this.props.userId)\r\n                this.props.getUserStatus(this.props.userId)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Suspense - Delay in receiving data. show Preloader at boot time\r\n            <Suspense fallback={<Preloader/>}>\r\n                <Profile profile={this.props.profile}\r\n                         updateStatusProfile={this.props.updateStatusProfile}\r\n                         status={this.props.status}\r\n                />\r\n            </Suspense>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateProfileType => ({\r\n    posts: state.profilePage.posts,\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id\r\n})\r\n\r\n\r\n// withRouter - позволяет получить доступ к истории(свойствам) и ближайшему Route соответствию.\r\n// withRouter - будет передавать обновленные match,location,history - свойства, обернутому компоненту при каждом рендере\r\nlet withRouterHOC = withRouter(ProfileContainer)\r\n\r\nexport default compose(\r\n    connect<MapStateProfileType, DispatchProfileType, {}, AppStateType>\r\n    (MapStateToProps, {addPost, getUserProfile, getUserStatus, updateStatusProfile})\r\n)(withRouterHOC)\r\n\r\n// types\r\ntype ParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateProfileType = {\r\n    posts: postsType[]\r\n    profile: profileUserType | null | undefined\r\n    status: string\r\n    userId: number | null\r\n}\r\nexport type DispatchProfileType = {\r\n    addPost: (value: string) => void\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateStatusProfile: (status: string) => void\r\n}\r\nexport type OwnProfilePropsType = MapStateProfileType & DispatchProfileType\r\ntype PropsType = RouteComponentProps<ParamsType> & OwnProfilePropsType\r\n\r\n\r\n","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Users.module.scss'\r\nimport Button from \"../common/Button/Button\";\r\n\r\n\r\n// нам нужна классовая компонента, когда мы хотим взаимодействовать с обьектом. и для избежания side Effect-а. в данной ситуации, для запроса на сервер\r\n// функциональная компонента - это читсая функция, которая принимает пропсы и возвращает jsx, при этом она не может никак менять состояние стейта\r\n// или делать запрос на сервер,\r\n// а лиш через dispatcher отсылать action для изменения состояния.\r\n\r\nconst defaultAvatar =\r\n    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU'\r\n\r\nconst Users = React.memo((props: propsType) => {\r\n    return <div>\r\n        <div className={s.wrapper}>\r\n            {\r\n                props.users.map(u =>\r\n                    <div className={s.card__item} key={u.id}>\r\n                        <div>\r\n                            <img src={u.photos.small ?\r\n                                u.photos.small : defaultAvatar}\r\n                                 alt={u.photos.small ? u.photos.small : defaultAvatar}/>\r\n                        </div>\r\n                        <NavLink to={`/profile/${u.id}`}>\r\n                            <span className={s.view__profile}>view profile</span>\r\n                        </NavLink>\r\n                        <span className={s.name}>{u.name}</span>\r\n                        {u.followed ?\r\n                            <Button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                props.unfollow(u.id)\r\n                            }}>DELETE FRIEND</Button> :\r\n                            <Button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                props.follow(u.id)\r\n                            }}>ADD FRIEND</Button>\r\n                        }\r\n                    </div>)\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n})\r\nexport default Users\r\n\r\n//types\r\ntype propsType = {\r\n    users: userType[]\r\n    follow: (uId: number) => void\r\n    unfollow: (uId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n","import {\r\n    FOLLOW,\r\n    UNFOLLOW,\r\n    SET_USERS,\r\n    SET_CURRENT_PAGE,\r\n    SET_TOTAL_USERS,\r\n    TOGGLE_IS_FETCHING,\r\n    TOGGLE_IS_FOLLOWING_PROGRESS\r\n} from \"../actions/actions\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport { ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\n\r\n// actions\r\nexport const followAC = (uId: number): followActionType => ({type: FOLLOW, uId})\r\nexport const unfollowAC = (uId: number): unFollowActionType => ({type: UNFOLLOW, uId})\r\nexport const setUsersAC = (users: userType[]): setUsersActionType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): setPageActionType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersActionType => ({type: SET_TOTAL_USERS, totalCount})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number): toggleFollowingInProgress =>\r\n    ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\nexport const setFilter = (filter: string): setFilterType => ({type: 'SET_FILTER', filter})\r\n\r\n\r\n// thunks\r\nexport const usersRequest = (page: number,pageSize: number):ThunkType => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsersAC(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        }).catch(e => {\r\n            alert(e)\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (userId: number):ThunkType => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId))\r\n        usersAPI.userFollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(followAC(userId))\r\n                    dispatch(toggleFollowingInProgress(false, userId))\r\n                }\r\n            }).catch(e => {\r\n            alert('you are not authorized')\r\n        })\r\n    }\r\n}\r\nexport const unfollow = (userId: number):ThunkType => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId))\r\n        usersAPI.userUnfollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(unfollowAC(userId))\r\n                    dispatch(toggleFollowingInProgress(false, userId))\r\n                }\r\n            }).catch(e => {\r\n            alert(e)\r\n        })\r\n    }\r\n}\r\n\r\n// types\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, UsersActionTypes>\r\ntype followActionType = {\r\n    type: typeof FOLLOW\r\n    uId: number\r\n}\r\n\r\ntype unFollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    uId: number\r\n}\r\n\r\ntype setPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\n\r\ntype setUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: userType[]\r\n}\r\ntype setTotalUsersActionType = {\r\n    type: typeof SET_TOTAL_USERS\r\n    totalCount: number\r\n}\r\ntype toggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\n\r\ntype toggleFollowingInProgress = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\ntype setFilterType = {\r\n    type: 'SET_FILTER'\r\n    filter: string\r\n}\r\n\r\nexport type UsersActionTypes =\r\n    followActionType |\r\n    unFollowActionType |\r\n    setPageActionType |\r\n    setUsersActionType |\r\n    setTotalUsersActionType |\r\n    toggleIsFetchingType |\r\n    toggleFollowingInProgress |\r\n    setFilterType","import {AppStateType} from \"../store\";\r\n// import {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state: AppStateType) => state.usersPage.users\r\n\r\n// library reselect\r\n// takes simple selectors (dependencies) and transfer into function parameters are what ordinary return selectors.\r\n// Selectors can compute derived data, allowing Redux to store the minimal possible state.\r\n// Selectors are efficient. A selector is not recomputed unless one of its arguments changes.\r\n// Selectors are composable. They can be used as input to other selectors.\r\n// export const getUsersSelector = createSelector(getUsers,(users) => {\r\n//     return users.filter(u => true)\r\n// })\r\n\r\nexport const getFilteredUsers = (state: AppStateType) => state.usersPage.users\r\n    .filter(u => u.name.toLowerCase().indexOf(state.usersPage.filter.toLowerCase()) > -1)\r\n\r\nexport const getPageSize = (state: AppStateType) => state.usersPage.pageSize\r\nexport const getTotalUsersCount = (state: AppStateType) => state.usersPage.totalUsersCount\r\nexport const getCurrentPage = (state: AppStateType) => state.usersPage.currentPage\r\nexport const getIsFetching = (state: AppStateType) => state.usersPage.isFetching\r\nexport const getFollowingInProgress= (state: AppStateType) => state.usersPage.followingInProgress","import React, {ChangeEvent} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from 'redux';\r\nimport Users from \"./Users\";\r\nimport {\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleFollowingInProgress,\r\n    usersRequest, follow, unfollow, setFilter\r\n} from \"../../redux/actionsCreator/usersAC\";\r\nimport {AppStateType} from '../../redux/store';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {\r\n    getCurrentPage, getFilteredUsers, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n} from \"../../redux/reducers/users-selector\";\r\nimport s from \"./Users.module.scss\";\r\nimport Button from \"../common/Button/Button\";\r\nimport MessageInform from \"../common/MessageInform/MessageInform\";\r\n\r\n\r\n// нам нужна классовая компонента, когда мы хотим взаимодействовать с обьектом. и для избежания side Effect-а. в данной\r\n// ситуации, для запроса на сервер\r\n// функциональная компонента - это чистая функция, которая принимает пропсы и возвращает jsx, при этом она не может\r\n// никак менять состояние стейта\r\n// или делать запросы на сервер,\r\n// а лиш через dispatcher отправлять action для изменения состояния.\r\n// type PropsType =  {\r\n//     currentValue: string\r\n//     timeoutId: NodeJS.Timeout\r\n//     pagesCount: number\r\n//     pages: Array<number>\r\n// }\r\n\r\nclass UsersContainer extends React.PureComponent<usersType & CallbacksType> {\r\n    //componentDidMount() вызывается сразу после монтирования (то есть, вставки компонента в DOM)\r\n    // В этом методе должны происходить действия, которые требуют наличия DOM-узлов.\r\n    state = {\r\n        currentValue: '',\r\n        timeoutId: 0,\r\n        pagesCount: 0,\r\n        pages: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.usersRequest(this.props.currentPage, this.props.pageSize)\r\n        this.setState({\r\n            pagesCount: Math.ceil(this.props.totalUsersCount / this.props.pageSize)\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<usersType & CallbacksType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(prevProps !== this.props) {\r\n            let temp = []\r\n            for (let i = 1; i <= this.state.pagesCount; i++) {\r\n                temp.push(i)\r\n            }\r\n            if(temp.length) {\r\n                this.setState({\r\n                    pages: temp\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        if (this.props.setCurrentPage) {\r\n            this.props.setCurrentPage(pageNumber)\r\n        }\r\n        this.props.usersRequest(pageNumber, this.props.pageSize)\r\n    }\r\n    userFollow = (userId: number) => {\r\n        this.props.follow(userId)\r\n    }\r\n    userUnfollow = (userId: number) => {\r\n        this.props.unfollow(userId)\r\n    }\r\n\r\n\r\n    onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            currentValue: e.currentTarget.value\r\n        })\r\n        clearTimeout(this.state.timeoutId)\r\n        this.setState({\r\n            timeoutId: setTimeout(() => {\r\n                this.props.setFilter(this.state.currentValue)\r\n            }, 500)\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<>\r\n                <div className={s.pagination}>\r\n                    <div className={s.input__wrapper}>\r\n                        <input placeholder={'Search here'} className={s.input__item} type=\"search\" value={this.state.currentValue} onChange={this.onSearchChange}/>\r\n                        {!this.props.users.length && <MessageInform>user not found</MessageInform>}\r\n                    </div>\r\n                    <div className={s.pagination_wrap__btn}>\r\n                        {this.state.pages.map(p => <Button onClick={() => this.onPageChanged(p)}\r\n                                                className={this.props.currentPage === p ? s.selected : ''} key={p}>{p}</Button>)}\r\n                    </div>\r\n                </div>\r\n                {this.props.isFetching ? <Preloader/> :\r\n                    <Users\r\n                        users={this.props.users}\r\n                        follow={this.userFollow}\r\n                        unfollow={this.userUnfollow}\r\n                        followingInProgress={this.props.followingInProgress}\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): usersType => {\r\n    return {\r\n        filter: state.usersPage.filter,\r\n        users: getFilteredUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<usersType, CallbacksType, {}, AppStateType>\r\n    (mapStateToProps, {\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleFollowingInProgress,\r\n        usersRequest,\r\n        follow,\r\n        unfollow,\r\n        setFilter\r\n    })\r\n)(UsersContainer)\r\n\r\n// types\r\ntype CallbacksType = {\r\n    setCurrentPage?: (currentPage: number) => void\r\n    setTotalUsersCount?: (totalCount: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    usersRequest: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setFilter: (filter: string) => void\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport style from './Header.module.scss'\r\nimport Button from \"../common/Button/Button\";\r\ntype PropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nlet icon = \"https://image.flaticon.com/icons/png/512/147/147144.png\"\r\n\r\nexport const Header = ({login, isAuth, logout}: PropsType) => {\r\n    return (\r\n        <header className={style.header}>\r\n            <div>\r\n                <img className={style.logo} src=\"https://www.designlime.co.uk/wp-content/uploads/2020/07/social-network-icon-png.png\"\r\n                     alt=\"logo\"/>\r\n            </div>\r\n\r\n                <div className={style.loginContainer}>\r\n                    {isAuth ?\r\n                        <>\r\n                            <div className={style.avatar_container}>\r\n                                <img className={style.header__avatar}\r\n                                     src={icon}\r\n                                     alt='Avatar' />\r\n                                <span>{login}</span>\r\n                            </div>\r\n\r\n                            <Button onClick={logout}>Logout</Button>\r\n                        </> : <NavLink to='/login' className={style.login}>Login</NavLink>}\r\n                </div>\r\n        </header>\r\n    )\r\n}","import { SET_USER_DATA} from \"../actions/actions\";\r\nimport {authMe, FormDataType} from \"../../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n// actions\r\nexport const setAuthUserDataAC = ({email,id,login,isAuth}:AuthStateType):authUserACType =>\r\n    ({ type: SET_USER_DATA, payload: {email, id,  login, isAuth} })\r\n\r\n// thunks\r\nexport const auth = ():ThunkType => {\r\n    return (dispatch) => {\r\n        return authMe.auth()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let { email, id, login } = data.data\r\n                    let isAuth = true\r\n                    dispatch(setAuthUserDataAC({email, id, login, isAuth}))\r\n                }\r\n            }).catch(e => {\r\n                alert(e)\r\n            })\r\n    }\r\n}\r\n\r\nexport const login = (formData: FormDataType):ThunkType => {\r\n    return (dispatch) => {\r\n        authMe.login(formData)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(auth())\r\n                } else {\r\n                    let error = data.messages.length > 0 ? data.messages[0] : 'Email or password is wrong'\r\n                    let action:any = stopSubmit('login',{_error: error})\r\n                    dispatch(action);\r\n                }\r\n            }).catch(e => {\r\n            alert(e)\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = ():ThunkType => {\r\n    return (dispatch) => {\r\n        authMe.logout()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let isAuth = false\r\n                    let email = null\r\n                    let id = null\r\n                    let login = null\r\n                    dispatch(setAuthUserDataAC({email,id,login, isAuth}))\r\n                }\r\n            }).catch(e => {\r\n            alert(e)\r\n        })\r\n    }\r\n}\r\n\r\n// types\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, authUserACType>\r\nexport type AuthStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type authUserACType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: AuthStateType\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logout} from \"../../redux/actionsCreator/authAC\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType & CallbacksType> {\r\n    logout = () => {\r\n        this.props.logout()\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    render() {\r\n        return (\r\n            <Header logout={this.logout} login={this.props.login} isAuth={this.props.isAuth}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): HeaderPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n//types\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype CallbacksType = {\r\n    logout: () => void\r\n}\r\n\r\nexport default connect<HeaderPropsType, CallbacksType, {}, AppStateType>(mapStateToProps, {logout})(HeaderContainer)","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {login} from \"../../redux/actionsCreator/authAC\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from './Login.module.scss'\r\nimport Button from \"../common/Button/Button\";\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>>  = (props) => {\r\n    //e.preventDefault\r\n    // get all form data and put them to object\r\n    // props.onSubmit(formData)\r\n    return (<form onSubmit={props.handleSubmit}>\r\n                <div><span>{props.error}</span></div>\r\n                <div style={{position: 'relative'}}>\r\n                    <div>Email or username</div>\r\n                    <Field component={Input}\r\n                            name={'email'}\r\n                            type=\"text\"\r\n                            placeholder={'Login'}\r\n                            validate={[required]}\r\n                /></div>\r\n                <div style={{position: 'relative'}}>\r\n                    <Field component={Input}\r\n                            name={'password'}\r\n                            type=\"password\"\r\n                            placeholder={'Password'}\r\n                            validate={[required]}\r\n                /></div>\r\n                <div>\r\n                    <Field component='input'\r\n                            name={'rememberMe'}\r\n                            type=\"checkbox\"/>\r\n                            <span>Remember Me</span>\r\n                </div>\r\n                <div style={{textAlign: 'center'}}>\r\n                    <Button style={{'width': '120px'}}>Login</Button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\n//HOC reduxForm - это контейнерная компонента\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props: MapDispatchToProps & MapStateToProps) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.loginContainer}>\r\n            <h1>Log in</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n// types\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    login: (formData: FormDataType) => void\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, AppStateType>(\r\n    mapStateToProps, {login}\r\n)(Login)\r\n","import React from 'react';\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\r\nimport DialogsContainer  from './components/Dialogs/DialogsContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {initializeApp} from \"./redux/actionsCreator/appAC\";\r\n\r\n\r\nclass App extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp() //\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"app-wrapper\">\r\n                    <HeaderContainer/>\r\n                    <div className=\"wrapper\">\r\n                        <Navbar/>\r\n                        <main className=\"content\">\r\n                            <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                            <Route exact path={[\"/\", \"/social-network\"]} render={() => <Redirect to={\"/profile\"}/>}/>\r\n                            <Route exact path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login\" render={() => <Login/>}/>\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {initialized: state.app.initialized}\r\n}\r\n\r\nexport default connect(mapStateToProps,{initializeApp})(App);\r\n\r\ntype PropsType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n","import {INITIALIZED} from \"../actions/actions\";\r\nimport {auth} from \"./authAC\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\n\r\n// actions\r\nexport const initializedSuccess = () =>\r\n    ({type: INITIALIZED}) as const\r\n\r\nexport const fake = () =>\r\n    ({type: 'FAKE'}) as const\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let res = dispatch(auth())\r\n    Promise.all([res]).then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\nexport type ActionsType =\r\n    ReturnType<typeof initializedSuccess> |\r\n    ReturnType<typeof fake>\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_POST, SET_STATUS, SET_USER_PROFILE} from \"../actions/actions\";\r\nimport {ProfileACTypes} from \"../actionsCreator/profileAC\";\r\n\r\nlet initialState: profilePageType = {\r\n    posts: [\r\n        { id: 1, message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet aspernatur at commodi consequuntur corporis dolore ex nemo nisi quod suscipit!', likesCount: 11 },\r\n        { id: 2, message: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet aspernatur at commodi consequuntur corporis dolore ex nemo nisi quod suscipit!', likesCount: 2 },\r\n        { id: 3, message: 'I\\'m Vova', likesCount: 111 },\r\n        { id: 4, message: 'Goodbye', likesCount: 1 },\r\n    ],\r\n    profile: null,\r\n    status: 'No status'\r\n};\r\n\r\n// Reducer - это чистая функция, которая принимает стейт, актион\r\n// если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst profileReducer = (state: profilePageType = initialState, action: ProfileACTypes): profilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let messageBody = action.value;\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, { id: 4, message: messageBody, likesCount: 0 }]\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return { ...state, profile: {...action.profile}}\r\n        case SET_STATUS:\r\n            return { ...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default profileReducer;\r\n\r\n\r\n","import { ADD_MESSAGE} from \"../actions/actions\";\r\n\r\nconst initialState: dialogsPageType = {\r\n    dialogs: [\r\n        {\r\n            id: '1',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSV83gjFPxbUtDH5iJuUHJHG45z--_hYg6GUA&usqp=CAU',\r\n            name: 'Sveta',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: false\r\n            },\r\n            messages: null\r\n        },\r\n        {\r\n            id: '2',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5g67tZkLuNcbMvMPfjAO08mstu5QTUr_y5g&usqp=CAU',\r\n            name: 'Angelina',\r\n            status: {\r\n                title: 'Angelina left 7 minute ago',\r\n                isOnline: false\r\n            },\r\n            messages: null\r\n        },\r\n        {\r\n            id: '3',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS3AVHYXRxxtX6-fzIMlSWLwqMDKCMVudzdiA&usqp=CAU',\r\n            name: 'Artem',\r\n            status: {\r\n                title: 'Angelina left 1 day ago',\r\n                isOnline: false\r\n            },\r\n            messages: null\r\n        },\r\n        {\r\n            id: '4',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU',\r\n            name: 'Vova',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            },\r\n            messages: null\r\n        },\r\n        {\r\n            id: '5',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU',\r\n            name: 'Naytin',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            },\r\n            messages: null\r\n        },\r\n        {\r\n            id: '6',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5g67tZkLuNcbMvMPfjAO08mstu5QTUr_y5g&usqp=CAU',\r\n            name: 'Svet_v',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            },\r\n            messages: [\r\n                { id: 1, message: \"Hello, I'm Sveta\" , name: 'Svet_v' },\r\n                { id: 2, message: 'Hi!, how are you?', name: 'Naytin' },\r\n                { id: 3, message: 'I,m fine, thx!', name: 'Svet_v' },\r\n            ]\r\n        },\r\n        {\r\n            id: '7',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5g67tZkLuNcbMvMPfjAO08mstu5QTUr_y5g&usqp=CAU',\r\n            name: '@Lera',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            },\r\n            messages: [\r\n                { id: 1, message: \"Hello, I'm Lera\" , name: 'Lera' },\r\n                { id: 2, message: 'Hi!, how are you?', name: 'Naytin' },\r\n                { id: 3, message: 'I,m fine, thx!', name: 'Lera' },\r\n            ]\r\n        },\r\n        {\r\n            id: '8',\r\n            avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0OpLU7rYWiPzdGX7LHNfSyDSNQRD8FMoNVA&usqp=CAU',\r\n            name: 'Valera',\r\n            status: {\r\n                title: 'Online',\r\n                isOnline: true\r\n            },\r\n            messages: [\r\n                { id: 1, message: \"Hello, I'm Valera\" , name: 'Valera' },\r\n                { id: 2, message: 'I,m fine, thx!', name: 'Valera' },\r\n            ]\r\n        },\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hello, how are you?', name: 'Sveta' },\r\n        { id: 2, message: 'I,m fine, thx!', name: 'Naytin' },\r\n        { id: 3, message: 'you, how are you', name: 'Alina' },\r\n        { id: 4, message: 'goodbye my friend', name: 'Naytin' },\r\n        { id: 5, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 6, message: 'goodbye my friend', name: 'Naytin' },\r\n        { id: 7, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 8, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 9, message: 'goodbye my friend', name: 'Artem' },\r\n        { id: 10, message: 'goodbye my friend', name: 'Artem' },\r\n    ]\r\n}\r\n\r\n// // Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// // если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// // измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst dialogsReducer = (state: dialogsPageType = initialState, action: actionType): dialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let messageText = action.value;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, { id: 11, message: messageText ? messageText : '', name: 'Naytin' }]\r\n            }\r\n        default:\r\n            return state // если ничего не изменилось, по дефолту возвращаем неизмененный стейт\r\n\r\n    }\r\n}\r\nexport default dialogsReducer;\r\n\r\n\r\n","import {\r\n    FOLLOW,\r\n    UNFOLLOW,\r\n    SET_USERS,\r\n    SET_CURRENT_PAGE,\r\n    SET_TOTAL_USERS,\r\n    TOGGLE_IS_FETCHING,\r\n    TOGGLE_IS_FOLLOWING_PROGRESS\r\n} from \"../actions/actions\";\r\nimport {UsersActionTypes} from \"../actionsCreator/usersAC\";\r\n\r\nconst initialState = {\r\n    filter: '',\r\n    users: [\r\n        // {id: 1, avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU', followed: false, fullName: 'Vova', status: 'Status', location: {city: 'Chernihiv', country: 'Ukraine'} },\r\n        // {id: 2, avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU', followed: true, fullName: 'Sveta', status: 'Status', location: {city: 'Chernihiv', country: 'Ukraine'} },\r\n        // {id: 3, avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSq_I0JFO2DxoAV3J-sI7ajtx0qW0Q5neaY_A&usqp=CAU', followed: false, fullName: 'John', status: 'Status', location: {city: 'Chicago', country: 'US'} }\r\n    ],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\n// // Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// // если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// // измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst usersReducer = (state: usersType = initialState, action: UsersActionTypes): usersType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.uId ? {...u, followed: true} : u)\r\n            }\r\n        // если в case нету ретурна, то необходимо делать брейк, чтобы case не проваливался дальше.\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.uId ? {...u, followed: false} : u)\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n\r\n        case SET_TOTAL_USERS:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount > 100 ? 100 : action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.filter\r\n            }\r\n        default:\r\n            return state // если ничего не изменилось, по дефолту возвращаем неизмененный стейт\r\n\r\n    }\r\n}\r\nexport default usersReducer;\r\n\r\n\r\n\r\n\r\n","import {SET_USER_DATA} from \"../actions/actions\";\r\nimport {AuthStateType, authUserACType} from \"../actionsCreator/authAC\";\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\n// Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst authReducer = (state: AuthStateType = initialState, action: authUserACType):AuthStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return { ...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer;","import {INITIALIZED} from \"../actions/actions\";\r\nimport {ActionsType} from '../actionsCreator/appAC'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    fake: 10\r\n}\r\n\r\n\r\n\r\n// Reducer - это чистая функция, которая принимает старый стейт, актион\r\n// если нужно модифицирует(добавляет какие-то данные) его по правилам имутабельности (работает с копией стейта и возвращает)\r\n// измененную копию из этой функции. Или возвращает нетронутый стейт, если ничего не изменилось.\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case INITIALIZED:\r\n            return {...state, initialized: true}\r\n        case 'FAKE':\r\n            return {...state, fake: state.fake + 1}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n    fake: number\r\n}\r\n\r\nexport default appReducer;\r\n\r\n","import {createStore, combineReducers,applyMiddleware} from \"redux\";\r\nimport profileReducer from \"./reducers/profileReducer\";\r\nimport dialogsReducer from \"./reducers/dialogsReducer\";\r\nimport usersReducer from \"./reducers/usersReducer\";\r\nimport authReducer from \"./reducers/authReducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport appReducer from \"./reducers/appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer, // зосдаем ветку form и передаем formReducer из 'redux-form'\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers // (globalstate: AppStateType) => AppStateType\r\n\r\nexport type AppStateType = ReturnType<RootReducerType> // get type for all state with helps ReturnType from RootReducerType\r\n\r\n//for redux-devtool\r\n// @ts-ignore\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\r\nconst store = createStore(reducers,composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2K2Wj\",\"avatar__wrapper\":\"Dialog_avatar__wrapper__LlKbk\",\"online\":\"Dialog_online__1vF4A\",\"offline\":\"Dialog_offline__3Lbjh\",\"status__block\":\"Dialog_status__block__3jN2j\",\"status\":\"Dialog_status__1SOyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3I3br\",\"error\":\"FormsControls_error__k7wEJ\",\"errorMessage\":\"FormsControls_errorMessage__zv9jX\",\"formSummaryError\":\"FormsControls_formSummaryError__LJwKW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__77AOv\",\"loginContainer\":\"Header_loginContainer__2-JaW\",\"login\":\"Header_login__VEQmZ\",\"avatar_container\":\"Header_avatar_container__24YeV\",\"header__avatar\":\"Header_header__avatar__NJs12\",\"logo\":\"Header_logo__1zMXW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__eIQoS\",\"nav__list\":\"Navbar_nav__list__N0cbb\",\"nav__item\":\"Navbar_nav__item__1vKtK\"};","import MessageInform from \"../components/common/MessageInform/MessageInform\";\r\n\r\nexport const required = (value: string): any | undefined => {\r\n    if(value) return undefined\r\n    return 'field is required'\r\n    // return <MessageInform style={{width: \"170px\"}}>field is required</MessageInform>\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): string | undefined => {\r\n        if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n        return undefined\r\n}\r\n\r\n","import React from 'react'\r\nimport style from './FormsControls.module.scss'\r\nimport MessageInform from \"../MessageInform/MessageInform\";\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n        <input className={`${style.formControl} ${hasError ? style.error : ''}`} {...input} {...props}/>\r\n        {hasError && <MessageInform className={style.errorMessage}>{meta.error}</MessageInform>}\r\n    </>\r\n}\r\n\r\nexport const TextArea = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return <>\r\n            <textarea className={`${style.formControl} ${hasError ? style.error : ''}`} {...input} {...props}/>\r\n        {hasError && <MessageInform className={style.errorMessage}>{meta.error}</MessageInform>}\r\n        </>\r\n}\r\n\r\n\r\n","import React, { HTMLAttributes} from 'react'\r\nimport s from './MessageInform.module.scss'\r\n\r\n\r\n\r\nconst MessageInform: React.FC<HTMLAttributes<HTMLDivElement>> = React.memo(({\r\n                                      className,\r\n                                      ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n                                  }) => {\r\n\r\n    const finalClassName = `${className ? className : ''} ${s.box__message}`;\r\n    return <div className={finalClassName} {...restProps}/>\r\n})\r\n\r\nexport default MessageInform","import {ADD_POST, SET_STATUS, SET_USER_PROFILE} from \"../actions/actions\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../store\";\r\nimport {profileAPI} from \"../../api/api\";\r\n\r\n// actions\r\nexport const addPost = (value: string) => ({type: ADD_POST, value}) as const\r\nexport const setUserProfile = (profile: profileUserType) => ({type: SET_USER_PROFILE, profile}) as const\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}) as const\r\n\r\n// thunks\r\nexport const getUserProfile = (userId: number): ThunkType =>\r\n    (dispatch) => {\r\n        profileAPI.getProfile(userId)\r\n            .then(data => dispatch(setUserProfile(data)))\r\n            .catch(e => {\r\n                alert(e)\r\n            })\r\n    }\r\n\r\nexport const getUserStatus = (userId: number): ThunkType =>\r\n    (dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(data => dispatch(setStatus(data)))\r\n            .catch(e => {\r\n                alert(e)\r\n            })\r\n    }\r\n\r\nexport const updateStatusProfile = (status: string): ThunkType =>\r\n    (dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(data => {\r\n                if (data.resultCode === 0) dispatch(setStatus(status))\r\n            })\r\n            .catch(e => {\r\n                alert(e)\r\n            })\r\n    }\r\n\r\n\r\n// types\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ProfileACTypes>\r\nexport type ProfileACTypes =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesSubscriber\":\"Messages_messagesSubscriber__2Dd67\",\"messagesMy\":\"Messages_messagesMy__2C2Br\",\"message\":\"Messages_message__2uG39\"};","export const ADD_MESSAGE = 'DIALOG/ADD_MESSAGE';\r\n\r\nexport const ADD_POST = 'PROFILE/ADD_POST';\r\nexport const SET_STATUS = 'SET_STATUS';\r\n\r\nexport const SET_USER_PROFILE = 'USER/SET_USER_PROFILE';\r\nexport const FOLLOW = 'USERS/FOLLOW'\r\nexport const UNFOLLOW = 'USERS/UNFOLLOW'\r\nexport const SET_USERS = 'USERS/SET_USERS'\r\nexport const SET_CURRENT_PAGE = 'USERS/SET_CURRENT_PAGE'\r\nexport const SET_TOTAL_USERS = 'USERS/SET_TOTAL_USERS'\r\nexport const TOGGLE_IS_FETCHING = 'USERS/TOGGLE_IS_FETCHING'\r\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS'\r\nexport const SET_USER_DATA = 'USERS/SET_USER_DATA';\r\n\r\nexport const INITIALIZED= 'AUTH/INITIALIZED';\r\n"],"sourceRoot":""}