{"version":3,"sources":["components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/Posts/Post/Post.module.scss","components/Profile/Posts/Posts.module.scss","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx"],"names":["module","exports","ProfileStatusWithHooks","React","memo","props","useState","status","setStatus","editMode","setEditMode","useEffect","onDoubleClick","profileStatus","userId","autoFocus","onBlur","updateStatusProfile","onKeyPress","e","key","currentTarget","value","onChange","type","ProfileInfo","className","style","profileInfo","profileInfo__wrapper","profileInfo__avatar","src","profile","photos","small","alt","profileInfo__des","profileInfo__menu","to","profileInfo__menu_item","profileInfo__title","fullName","profileInfo__info","Post","message","likesCount","date","Date","toJSON","slice","toTimeString","post__item","post__header","post__avatar","post__name","post__comments","AddNewPostForm","onSubmit","handleSubmit","Field","component","TextArea","name","validate","required","Button","AddNewPost","reduxForm","form","Posts","posts","addPost","isAuth","useSelector","state","auth","modal","setModal","post","map","elem","i","id","posts__wrapper","text","newPostMessage","PostsContainer","nextProps","nextState","nextContext","this","Component","connect","profilePage","setUserProfile","Profile"],"mappings":"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","file":"static/js/3.96d76c05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1hWgy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo__wrapper\":\"ProfileInfo_profileInfo__wrapper__jcKgs\",\"profileInfo__avatar\":\"ProfileInfo_profileInfo__avatar__21g6G\",\"profileInfo__des\":\"ProfileInfo_profileInfo__des__36exJ\",\"profileInfo__title\":\"ProfileInfo_profileInfo__title__2n4Cs\",\"profileInfo__info\":\"ProfileInfo_profileInfo__info__NrYoI\",\"profileInfo__menu\":\"ProfileInfo_profileInfo__menu__1EWKT\",\"profileInfo__menu_item\":\"ProfileInfo_profileInfo__menu_item__3lAYB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post__item\":\"Post_post__item__1Eyxw\",\"post__header\":\"Post_post__header__1Rq59\",\"post__name\":\"Post_post__name__2Gzmj\",\"post__avatar\":\"Post_post__avatar__2i_HP\",\"post__comments\":\"Post_post__comments__sSWSn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts__wrapper\":\"Posts_posts__wrapper__3Cgg3\",\"modal__open\":\"Posts_modal__open__2zXWC\",\"modal\":\"Posts_modal__2bgUx\"};","import React, {ChangeEvent, KeyboardEvent, useEffect} from 'react'\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = React.memo((props) => {\r\n    const [status, setStatus] = React.useState(props.status)\r\n    const [editMode, setEditMode] = React.useState(false)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) // call useEffect when props.status changed\r\n\r\n    const activateEditMode = () => {\r\n        if (props.profileStatus?.userId === 13139) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusProfile(status)\r\n    }\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const changeStatusKey = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            setStatus(e.currentTarget.value)\r\n            props.updateStatusProfile(status)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div onDoubleClick={activateEditMode}><span>{status || 'No status'}</span></div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onKeyPress={changeStatusKey}\r\n                       onChange={changeStatus}\r\n                       type=\"text\"\r\n                       value={status}/>\r\n            </div>}\r\n        </>\r\n    )\r\n})\r\n\r\n// types\r\ntype PropsType = {\r\n    updateStatusProfile: (status: string) => void\r\n    status: string\r\n    profileStatus: profileUserType | null | undefined\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport style from \"./ProfileInfo.module.scss\";\r\n// import ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: profileUserType | null | undefined\r\n    updateStatusProfile: (status: string) => void\r\n    status: string\r\n}\r\n\r\nlet icon = \"https://image.flaticon.com/icons/png/512/147/147144.png\"\r\n\r\nexport const ProfileInfo = React.memo((props: PropsType) => {\r\n    return (\r\n        <div className={style.profileInfo}>\r\n            <div className={style.profileInfo__wrapper}>\r\n                <div>\r\n                    <img className={style.profileInfo__avatar}\r\n                        src={props.profile?.photos.small ? props.profile?.photos.small : icon}\r\n                         alt='Avatar' />\r\n                </div>\r\n            </div>\r\n            <div className={style.profileInfo__des}>\r\n                <ul className={style.profileInfo__menu}>\r\n                    <Link to='Test/About' className={style.profileInfo__menu_item}>About</Link>\r\n                    <Link to='Test/Friends' className={style.profileInfo__menu_item}>Friends</Link>\r\n                    <h6 className={style.profileInfo__title}>{props.profile?.fullName}</h6>\r\n                    <Link to='/Settings' className={style.profileInfo__menu_item}>Settings</Link>\r\n                    <Link to='Test/Photos' className={style.profileInfo__menu_item}>Photos</Link>\r\n                </ul>\r\n                <div className={style.profileInfo__info}>San Francisco, CA</div>\r\n                <ProfileStatusWithHooks updateStatusProfile={props.updateStatusProfile}\r\n                              status={props.status}\r\n                             profileStatus={props.profile} />\r\n                {/*<ProfileStatus updateStatusProfile={props.updateStatusProfile}*/}\r\n                {/*               status={props.status}*/}\r\n                {/*               profileStatus={props.profile}*/}\r\n                {/*/>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport style from './Post.module.scss'\r\n\r\n\r\nexport const Post = React.memo(({message, likesCount}: postsType) => {\r\n    let date = new Date().toJSON().slice(0, 10);\r\n    let time = new Date().toTimeString().slice(0, 8);\r\n    // let dateTime = `${date} ${time}`;\r\n\r\n    return (\r\n        <div className={style.post__item}>\r\n            <div className={style.post__header}>\r\n                <img className={style.post__avatar}\r\n                     src=\"https://image.flaticon.com/icons/png/512/147/147144.png\"\r\n                     alt=\"\"/>\r\n                <div>\r\n                    <span className={style.post__name}>\r\n                        James Luis\r\n                     </span>\r\n                    <time>{date}</time>\r\n                </div>\r\n            </div>\r\n            <article>\r\n                {message}\r\n            </article>\r\n            <div className={style.post__comments}>\r\n                <span>Likes<b>{likesCount}</b></span>\r\n            </div>\r\n        </div>)\r\n})","import React from \"react\";\r\nimport {Post} from \"./Post/Post\";\r\nimport style from './Posts.module.scss'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\n\r\n// создаем компонент form и типизируем стандартным InjectedFormProps который принимает дженерик\r\nconst AddNewPostForm: React.FC<InjectedFormProps<NewPostType>> = React.memo((props) => {\r\n    return (\r\n        //e.preventDefault\r\n        // get all form data and put them to object\r\n        // props.onSubmit(formData)\r\n        //по умолчанию, нам нужно передать стандартный обработчик handleSubmit, который нам попадает из ХОКа reduxForm\r\n        <form onSubmit={props.handleSubmit}>\r\n            {/* вместо тега input нужно заменять на Field component='textarea/input' name с уникальным именем н*/}\r\n            <Field component={TextArea}\r\n                   name={'newPostMessage'}\r\n                   validate={[required]}\r\n            />\r\n            <Button>Send post</Button>\r\n        </form>\r\n    )\r\n})\r\n\r\n// мы должны обернуть нашу форму ХОКом reduxForm,\r\nconst AddNewPost = reduxForm<NewPostType>({\r\n    // задаем уникальное имя\r\n    form: 'addNewPost'\r\n})(AddNewPostForm)\r\n\r\nexport const Posts = React.memo(({posts, addPost}: profilePageType & DispatchProfileType) => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const [modal, setModal] = React.useState(false)\r\n    const onSubmit = (text: NewPostType) => {\r\n        addPost(text.newPostMessage)\r\n        setModal(!modal)\r\n    }\r\n\r\n    const onModal = () => setModal(!modal)\r\n\r\n\r\n    let post = posts.map((elem, i) => <Post message={elem.message} likesCount={elem.likesCount} id={elem.id} key={i}/>)\r\n    return (\r\n        <div className={style.posts__wrapper}>\r\n            {/*<Button  onClick={onModal}>Add Post</Button>*/}\r\n            {modal &&\r\n            <div className={style.modal}>\r\n                <AddNewPost onSubmit={onSubmit}/>{/* Передаем в форму callback который под капотом\r\n                будет вызван как handleSubmit и нам вернется объект, с данными из формы*/}\r\n            </div>\r\n            }\r\n            <div className=\"post\">\r\n                {isAuth ? post : 'posts not found'}\r\n            </div>\r\n        </div>)\r\n})\r\n\r\n// types\r\ntype NewPostType = {\r\n    newPostMessage: string\r\n}\r\n\r\n","import {Posts} from \"./Posts\"\r\nimport {addPost, setUserProfile} from \"../../../redux/actionsCreator/profileAC\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nclass PostsContainer extends React.Component<OwnPostsPropsType, DispatchProfileType> {\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<OwnPostsPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return nextProps != this.props || nextState != this.state\r\n    }\r\n\r\n    render() {\r\n        return <Posts posts={this.props.posts} status={this.props.status} addPost={this.props.addPost}/>;\r\n    }\r\n}\r\n\r\n\r\n// функция mapStateToProps которая принимает весь стейт целиком и возвращает только те данные,\r\n// которые нам нужны и которые мы описываем в ней\r\nconst mapStateToProps = (state: AppStateType): profilePageType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n// функция mapDispatchToProps служит для того, чтобы передавать дочерней, презентационной компоненте,\r\n// callback-функции\r\n\r\n\r\n// для сокращения кода, мы можем не создавать callback-mapDispatchToProps, а просто передать объекты(ActionCreators) вторым параметром в connect,\r\n// а connect уже сам создаст mapDispatchToProps вложит каждый ActionCreators в dispatch\r\n// если в объекте имя ключ: значение совпадает, то мы пишем просто ключ.\r\nexport default connect<profilePageType, DispatchProfileType, {}, AppStateType>\r\n(mapStateToProps, {addPost,setUserProfile})\r\n(PostsContainer)\r\n\r\ntype MapStateProfileType = {\r\n    posts: postsType[]\r\n    status: string\r\n}\r\nexport type OwnPostsPropsType = MapStateProfileType & DispatchProfileType\r\n","import React from \"react\";\r\nimport style from './Profile.module.scss'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./Posts/PostsContainer\";\r\n\r\n\r\n\r\n const Profile = React.memo((props: PropsType) => {\r\n    return (\r\n        <div className={style.profile}>\r\n            <ProfileInfo profile={props.profile}\r\n                         updateStatusProfile={props.updateStatusProfile}\r\n                         status={props.status}\r\n            />\r\n            <PostsContainer/>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default Profile\r\n// types\r\ntype PropsType = {\r\n    profile: profileUserType | null | undefined\r\n    updateStatusProfile: (status: string) => void\r\n    status: string\r\n}\r\n"],"sourceRoot":""}